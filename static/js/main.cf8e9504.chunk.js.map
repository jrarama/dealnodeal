{"version":3,"sources":["img/background.jpg","Box.js","App.js","serviceWorker.js","index.js","img/open-case.png","img/closed-case.png","img/happy.png","img/sad.png","img/title.png"],"names":["module","exports","styles","bounce","animation","animationName","Radium","keyframes","rollIn","Box","props","state","opened","hidden","this","console","log","JSON","parse","stringify","setState","onClick","className","style","handleClick","src","caseOpened","caseClosed","number","React","Component","swing","flip","App","popHidden","winner","winArr","array","i","length","j","Math","floor","random","temp","wins","loss","Array","fill","concat","shuffleArray","boxes","push","popOpen","key","title","createTables","popClose","happy","sad","index","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf8e9504.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.a3af13d3.jpg\";","import React from \"react\";\nimport { rollIn } from \"react-animations\";\nimport Radium, { StyleRoot } from \"radium\";\nimport caseClosed from \"./img/closed-case.png\";\nimport caseOpened from \"./img/open-case.png\";\n\nconst styles = {\n  bounce: {\n    animation: \"x 2s\",\n    animationName: Radium.keyframes(rollIn, \"bounce\")\n  }\n};\n\nexport default class Box extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state  = {\n      opened: false,\n      hidden: false\n    };\n  }\n\n  handleClick() {\n    if (this.state.opened) {\n      console.log(\"Opened already.\");\n      return;\n    }\n    var state = JSON.parse(JSON.stringify(this.state));\n    state.opened = true;\n\n    this.setState(state);\n\n    console.log(this.state);\n    this.props.onClick();\n  }\n\n  render() {\n    return (\n      <StyleRoot className=\"box-root\">\n        <div\n          className={\"box\" + (this.state.opened ? \" opened\" : \" closed\") }\n          style={styles.bounce}\n          onClick={() => this.handleClick()}\n        >\n          <img src={this.state.opened ? caseOpened : caseClosed} className=\"box-img\" />\n          <label className=\"box-label\">{this.props.number}</label>\n        </div>\n      </StyleRoot>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./index.css\";\nimport Box from \"./Box\";\nimport { swing, flip } from \"react-animations\";\nimport Radium, { StyleRoot } from \"radium\";\nimport caseOpened from \"./img/open-case.png\";\nimport happy from \"./img/happy.png\";\nimport sad from \"./img/sad.png\";\nimport background from \"./img/background.jpg\"\nimport title from \"./img/title.png\"\n\nconst styles = {\n  swing: {\n    animation: \"x 2s\",\n    animationName: Radium.keyframes(swing, \"swing\")\n  },\n  flip: {\n    animation: \"x 4s\",\n    animationName: Radium.keyframes(flip, \"flip\")\n  }\n};\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      popHidden: true,\n      winner: 1\n    };\n\n    this.winArr = [];\n  }\n\n  shuffleArray (array) {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  createTables (wins, loss) {\n    this.winArr = Array(wins).fill(1).concat(Array(loss).fill(0));\n    this.shuffleArray(this.winArr);\n\n    var boxes = [];\n    for (let i = 0; i < this.winArr.length; i++) {\n      boxes.push(\n        <Box number={i + 1}\n          winner = {this.winArr[i]}\n          onClick={() => this.popOpen(i)}\n          key={i}\n          />\n        );\n    }\n\n    return boxes;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <StyleRoot style={styles.flip} >\n          <img src={title} className=\"game-title\" />\n        </StyleRoot>\n\n        <div className=\"cases\">{this.createTables(16, 5)}</div>\n\n        <div\n          className={\"overlay\" + (this.state.popHidden ? \" hidden\" : \"\")}\n          onClick={() => this.popClose()}\n        >\n\n        <StyleRoot className=\"box-root\" style={styles.swing} >\n            <img src={caseOpened} className={\"box-popup\" + (this.state.popHidden ? \" hidden\" : \"\") } />\n            <img src={this.state.winner === 1 ? happy: sad } className={\"smiley\" + (this.state.popHidden ? \" hidden\" : \"\") } />\n        </StyleRoot>\n        </div>\n\n      </div>\n    );\n  }\n\n  popClose(index) {\n    console.log(\"Closing popup\");\n    this.setState({ popHidden: true, winner: this.winArr[index] });\n  }\n\n  popOpen(index) {\n    console.log(\"Opening popup\");\n    this.setState({ popHidden: false, winner: this.winArr[index] });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/open-case.0bc4cb60.png\";","module.exports = __webpack_public_path__ + \"static/media/closed-case.76ceefa8.png\";","module.exports = __webpack_public_path__ + \"static/media/happy.3d2c4d48.png\";","module.exports = __webpack_public_path__ + \"static/media/sad.500b4692.png\";","module.exports = __webpack_public_path__ + \"static/media/title.e2876660.png\";"],"sourceRoot":""}